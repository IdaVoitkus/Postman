{
	"info": {
		"_postman_id": "b01ee4e5-77d8-4712-b0af-ab6209cce3c4",
		"name": "HW_2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20720567"
	},
	"item": [
		{
			"name": "/first  (HW_point_1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string \r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4 (HW_point_4)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить responce body в json:\r",
							"let resp_data_4 = pm.response.json()\r",
							"\r",
							"// 4. Спарсить request\r",
							"let req_data_4 = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"IDA\", function () {\r",
							"    pm.expect(resp_data_4.name).to.eql(req_data_4.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"25\", function () {\r",
							"    //(привести в коде в строковому типу данных age в ответе с запроса)\r",
							"    pm.expect(String(resp_data_4.age)).to.eql(req_data_4.age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"Salary from request--\", req_data_4.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"Salary from responce --\",resp_data_4.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"ID 0 of salary from responce --\", resp_data_4.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"ID 1 of salary from responce --\", resp_data_4.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"ID 2 of salary from responce --\", resp_data_4.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"ID 0 salary from responce equally salary from request\", function () {\r",
							"     pm.expect(String(resp_data_4.salary[0])).to.eql(req_data_4.salary);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"ID 1 salary from responce equally salary*2 from request\", function () {\r",
							"     pm.expect(resp_data_4.salary[1]).to.eql(String(req_data_4.salary*2));\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"ID 2 salary from responce equally salary*3 from request\", function () {\r",
							"     pm.expect(resp_data_4.salary[2]).to.eql(String(req_data_4.salary*3));\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\", req_data_4.name);\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\", req_data_4.age);\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\", req_data_4.salary);\r",
							"\r",
							"// 18. Передать в окружение переменную name (выполнен одной командой в пункте 15)\r",
							"// 19. Передать в окружение переменную age (выполнен одной командой в пункте 16)\r",
							"// 20. Передать в окружение переменную salary (выполнен одной командой в пункте 17)\r",
							"\r",
							"// 21. Написать цикл, который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for(let i=0; i < 3; i++)\r",
							"console.log(resp_data_4.salary[i])\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=IDA&age=25&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "IDA"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3 (HW_point_3)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить responce body в json:\r",
							"let resp_data_3 = pm.response.json()\r",
							"\r",
							"// 4. Спарсить request\r",
							"let req_data_3 = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"IDA\", function () {\r",
							"    pm.expect(resp_data_3.name).to.eql(req_data_3.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"25\", function () {\r",
							"    pm.expect(resp_data_3.age).to.eql(req_data_3.age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"1000\", function () {\r",
							"    //(привести в коде в строковому типу данных salary в ответе с запроса)\r",
							"    pm.expect(String(resp_data_3.salary)).to.eql(req_data_3.salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response\r",
							"console.log(resp_data_3.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog has name\", function() {\r",
							"  pm.expect(resp_data_3.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							" \r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog has age\", function() {\r",
							"  pm.expect(resp_data_3.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Name has Luky\", function () {\r",
							"       pm.expect(resp_data_3.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(4, function () {\r",
							"       pm.expect(resp_data_3.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_3?name=IDA&age=25&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "IDA"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3 (HW_point_2)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3.Спарсить responce body в json:\r",
							"let resp_data = pm.response.json()\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request:\r",
							"pm.test(\"IDA\", function () {\r",
							"    pm.expect(resp_data.name).to.eql(\"IDA\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request:\r",
							"pm.test(\"25\", function () {\r",
							"    pm.expect(resp_data.age).to.eql(\"25\");\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request:\r",
							"pm.test(\"1000\", function () {\r",
							"    //(привести в коде в строковому типу данных salary в ответе с запроса)\r",
							"    pm.expect(String(resp_data.salary)).to.eql(\"1000\");\r",
							"});\r",
							"\r",
							"// 7. Спарсить request: т.к. изначально формат запроса JSON, мы объявили переменную и поместили в нее данные из запроса\r",
							"let req_data = request.data\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.):\r",
							"pm.test(\"IDA\", function () {\r",
							"    pm.expect(resp_data.name).to.eql(req_data.name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.):\r",
							"pm.test(\"25\", function () {\r",
							"    pm.expect(resp_data.age).to.eql(req_data.age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"1000\", function () {\r",
							"    //(привести к строковому типу данных salary в ответе с запроса)\r",
							"    pm.expect(String(resp_data.salary)).to.eql(req_data.salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response\r",
							"let resp_family = resp_data.family\r",
							"console.log(resp_family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"4000\", function () {\r",
							"    pm.expect(resp_data.family.u_salary_1_5_year).to.eql(req_data.salary*4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "IDA",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2 (HW_point_5)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request: Команда исполняется при добавлении в body-->form-data-->value фигурных скобок  '{{', и из выпадающего списка выбирается параметр. (Предварительно необходимо проверить, выбрано ли нужное нам для работы окружение, из которого будет забираться параметр salary)\r",
							"// 2. Вставить параметр age из окружения в age: Команда исполняется при добавлении в body-->form-data-->value фигурных скобок  '{{', и из выпадающего списка выбирается параметр. (Предварительно необходимо проверить, выбрано ли нужное нам для работы окружение, из которого будет забираться параметр age)\r",
							"// 3. Вставить параметр name из окружения в name: Команда исполняется при добавлении в body-->form-data-->value фигурных скобок  '{{', и из выпадающего списка выбирается параметр. (Предварительно необходимо проверить, выбрано ли нужное нам для работы окружение, из которого будет забираться параметр name)\r",
							"\r",
							"// 4. Отправить запрос.\r",
							"\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"let resp_data_5 = pm.response.json()\r",
							"\r",
							"// 7. Спарсить request. т.к. изначально формат запроса JSON, мы объявили переменную и поместили в нее данные из запроса\r",
							"let req_data_5 = request.data\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"resp_data_5 has start_qa_salary \", function() {\r",
							"  pm.expect(resp_data_5).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"resp_data_5 has qa_salary_after_6_months \", function() {\r",
							"  pm.expect(resp_data_5).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"resp_data_5 has qa_salary_after_12_months \", function() {\r",
							"  pm.expect(resp_data_5).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"resp_data_5 has qa_salary_after_1.5_year\", function() {\r",
							"  pm.expect(resp_data_5).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"resp_data_5 has qa_salary_after_3.5_years\", function() {\r",
							"  pm.expect(resp_data_5).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"resp_data_5 has person\", function() {\r",
							"  pm.expect(resp_data_5).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary equal salary from request\", function () {\r",
							"    pm.expect(String(resp_data_5.start_qa_salary)).to.eql(req_data_5.salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months equal salary*2 from request\", function () {\r",
							"    pm.expect(resp_data_5.qa_salary_after_6_months).to.eql(req_data_5.salary*2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months equal salary*2.7 from request\", function () {\r",
							"    pm.expect(resp_data_5.qa_salary_after_12_months).to.eql(req_data_5.salary*2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year equal salary*3.3 from request\", function () {\r",
							"    pm.expect(resp_data_5['qa_salary_after_1.5_year']).to.eql(req_data_5.salary*3.3);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years equal salary*3.8 from request\", function () {\r",
							"    pm.expect(resp_data_5['qa_salary_after_3.5_years']).to.eql(req_data_5.salary*3.8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"ID 1 u_name from responce equally salary from request\", function () {\r",
							"     pm.expect(String(resp_data_5.person.u_name[1])).to.eql(req_data_5.salary);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age from responce equally age from request\", function () {\r",
							"     pm.expect(String(resp_data_5.person.u_age)).to.eql(req_data_5.age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years equal salary*4.2 from request\", function () {\r",
							"    pm.expect(resp_data_5.person.u_salary_5_years).to.eql(req_data_5.salary*4.2);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for(let i=0; i < 3; i++){\r",
							"    if (i == 0 ){\r",
							"    console.log(resp_data_5.person.u_age);\r",
							"}   else if (i == 1){\r",
							"        for(let x=0; x < 3; x++){\r",
							"        console.log(resp_data_5.person.u_name[x])}\r",
							"}   else if (i == 2){\r",
							"    console.log(resp_data_5.person.u_salary_5_years);\r",
							"}\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}